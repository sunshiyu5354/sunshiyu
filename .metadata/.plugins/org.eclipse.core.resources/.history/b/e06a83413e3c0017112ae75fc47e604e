package com.Fanshe;

import java.io.Serializable;
import java.lang.reflect.Constructor;

/**通过一个对象获得完整的包名和类名
 * public class TestReflect {
    public static void main(String[] args) throws Exception {
        TestReflect testReflect = new TestReflect();
        System.out.println(testReflect.getClass().getName());
        // 结果 com.Fanshe.TestReflect
    }
}
*/

/**实例化Class类对象
 * public class TestReflect{
	public static void main(String args[]) throws Exception{
		Class<?> cl1 = null;
		Class<?> cl2 = null;
		Class<?> cl3 = null;
		//一般采用这种形式
		cl1 = Class.forName("com.Fanshe.TestReflect");
		cl2 = new TestReflect().getClass();
		cl3 = TestReflect.class;
		System.out.println("类名称"+cl1.getName());
		System.out.println("类名称"+cl2.getName());
		System.out.println("类名称"+cl3.getName());
	}
}
*/

/**获取一个对象的父类和实现的接口
 * public class TestReflect implements Serializable{
	private static final long serialVersionUID = -55555555555555L;
	public static void main(String args[]) throws Exception{
		Class<?> clazz = Class.forName("com.Fanshe.TestReflect");
		//获取父类
		Class<?> parentClass = clazz.getSuperclass();
		System.out.println("clazz的父类为:"+parentClass.getName());
		//clazz的父类为:java.long.Object
		//获取所有的接口
		Class<?> intes[] = clazz.getInterfaces();
		System.out.println("clazz实现的接口有:");
		for(int i = 0;i< intes.length;i++){
			 System.out.println((i + 1) + "：" + intes[i].getName());
		}
		//clazz实现的接口有:
		//1:java.io.Serializble
	}
}
 */
public class TestReflect{
	public static void main(String args[]) throws Exception{
		Class<?> cl1 = null;
		cl1 = Class.forName("com.Fanshe.user");
		//第一种方法，实例化默认构造方法，调用set赋值
		User user = (User) cl1.newInstance
	}
}
